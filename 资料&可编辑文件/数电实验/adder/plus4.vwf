/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 10000.0;
	SIMULATION_TIME = 10000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("A")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("A[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "A";
}

SIGNAL("A[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "A";
}

SIGNAL("A[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "A";
}

SIGNAL("A[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "A";
}

SIGNAL("B")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("B[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "B";
}

SIGNAL("B[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "B";
}

SIGNAL("B[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "B";
}

SIGNAL("B[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "B";
}

SIGNAL("Co")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("CO1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("H[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("H[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("H[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("H[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("H[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("A[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 10000.0;
		}
	}
}

TRANSITION_LIST("A[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 125;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
	}
}

TRANSITION_LIST("A[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 250;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
	}
}

TRANSITION_LIST("A[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 500;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("B[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 5000.0;
			LEVEL 1 FOR 5000.0;
		}
	}
}

TRANSITION_LIST("B[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2500.0;
			LEVEL 1 FOR 2500.0;
		}
	}
}

TRANSITION_LIST("B[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 80.0;
	}
}

TRANSITION_LIST("B[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 31;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("Co")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5010.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 230.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 70.0;
			LEVEL 1 FOR 10.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 60.0;
				LEVEL 1 FOR 20.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 50.0;
				LEVEL 1 FOR 30.0;
			}
		}
		LEVEL 0 FOR 230.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 50.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL 0 FOR 230.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 10.0;
				LEVEL 1 FOR 70.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 30.0;
				LEVEL 1 FOR 50.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 60.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 70.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 50.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 60.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 70.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 50.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
	}
}

TRANSITION_LIST("CO1")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 10000.0;
	}
}

TRANSITION_LIST("H[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 160.0;
			NODE
			{
				REPEAT = 2;
				LEVEL U FOR 10.0;
				LEVEL 0 FOR 70.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 60.0;
			}
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 40.0;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 10.0;
		}
		LEVEL 0 FOR 160.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 10.0;
			LEVEL 0 FOR 70.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 10.0;
		LEVEL 0 FOR 160.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 10.0;
			LEVEL 0 FOR 70.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 130.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 540.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 5380.0;
	}
}

TRANSITION_LIST("H[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 230.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 10.0;
			LEVEL 0 FOR 70.0;
			LEVEL U FOR 10.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 60.0;
				LEVEL U FOR 20.0;
			}
			LEVEL 0 FOR 50.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 240.0;
		}
		LEVEL U FOR 10.0;
		LEVEL 0 FOR 70.0;
		LEVEL U FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 50.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 240.0;
		LEVEL U FOR 10.0;
		LEVEL 0 FOR 70.0;
		LEVEL U FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 50.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 90.0;
			NODE
			{
				REPEAT = 3;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 60.0;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 50.0;
			}
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 90.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 50.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 90.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 50.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 50.0;
			LEVEL 0 FOR 30.0;
			LEVEL U FOR 30.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 60.0;
				LEVEL U FOR 20.0;
			}
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL U FOR 30.0;
				LEVEL 0 FOR 50.0;
			}
			LEVEL U FOR 40.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL U FOR 50.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 50.0;
		}
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 50.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 50.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 230.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 70.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 550.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 260.0;
	}
}

TRANSITION_LIST("H[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL U FOR 40.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 30.0;
				LEVEL U FOR 50.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 60.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 10.0;
				LEVEL U FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 10.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 40.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 30.0;
			LEVEL U FOR 50.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 60.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 40.0;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 10.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 40.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 30.0;
			LEVEL U FOR 50.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 60.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 50.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 40.0;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 4;
				LEVEL U FOR 30.0;
				LEVEL 0 FOR 50.0;
			}
			LEVEL U FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 30.0;
				LEVEL U FOR 50.0;
			}
		}
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 4;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 50.0;
		}
		LEVEL U FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 30.0;
			LEVEL U FOR 50.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 4;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 50.0;
		}
		LEVEL U FOR 80.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 50.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 10.0;
				LEVEL U FOR 40.0;
				LEVEL 0 FOR 10.0;
				LEVEL U FOR 20.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 60.0;
			}
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 30.0;
				LEVEL U FOR 50.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 40.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 60.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 30.0;
			LEVEL U FOR 50.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 40.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 60.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 50.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 50.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 110.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 30.0;
			LEVEL U FOR 50.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 110.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 30.0;
			LEVEL U FOR 50.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 110.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 30.0;
			LEVEL U FOR 50.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 110.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 60.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 10.0;
	}
}

TRANSITION_LIST("H[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 90.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 90.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 90.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 70.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 90.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 30.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 40.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 30.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 40.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 30.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 40.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 30.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 40.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 10.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
		}
		LEVEL U FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 30.0;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 5;
				LEVEL U FOR 30.0;
				LEVEL 0 FOR 10.0;
			}
			LEVEL U FOR 50.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 10.0;
				LEVEL U FOR 30.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 10.0;
				LEVEL U FOR 30.0;
			}
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 5;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 10.0;
		}
		LEVEL U FOR 50.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 5;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 10.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 50.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 10.0;
				LEVEL U FOR 30.0;
			}
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 10.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 10.0;
				LEVEL U FOR 30.0;
			}
			LEVEL 0 FOR 10.0;
		}
		LEVEL U FOR 50.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 10.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 50.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 10.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 30.0;
		}
		LEVEL 0 FOR 10.0;
		LEVEL U FOR 20.0;
	}
}

TRANSITION_LIST("H[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 30;
			LEVEL U FOR 20.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 10.0;
				LEVEL U FOR 10.0;
			}
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 7;
				LEVEL U FOR 10.0;
				LEVEL 0 FOR 10.0;
			}
		}
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 10.0;
			LEVEL U FOR 10.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 10.0;
			LEVEL 0 FOR 10.0;
		}
		LEVEL U FOR 10.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "A";
	EXPAND_STATUS = EXPANDED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4;
}

DISPLAY_LINE
{
	CHANNEL = "A[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "A[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "A[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "A[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "B";
	EXPAND_STATUS = EXPANDED;
	RADIX = ASCII;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
	CHILDREN = 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "B[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "B[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "B[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "B[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "Co";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "CO1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "H[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "H[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "H[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "H[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "H[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 19775;
	MASTER = TRUE;
}
;
